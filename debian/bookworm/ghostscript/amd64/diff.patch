From 3b9b175fa3bd604fbdcf0f9ab4a2354fa5cd0e73 Mon Sep 17 00:00:00 2001
Date: Fri, 8 Aug 2025 15:39:07 +0530
Subject: [PATCH] Bug 708606: Catch a null file pointer closing pdfwrite.
 (exact cherry-pick to 10.0.0)

---
 devices/vector/gdevpdf.c | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/devices/vector/gdevpdf.c b/devices/vector/gdevpdf.c
index 40beb06a5..1efb08e98 100644
--- a/devices/vector/gdevpdf.c
+++ b/devices/vector/gdevpdf.c
@@ -933,7 +933,12 @@ pdf_open(gx_device * dev)
 static int
 pdf_ferror(gx_device_pdf *pdev)
 {
-    gp_fflush(pdev->file);
+    int code = 0;
+
+    if (pdev->file != NULL) {
+        gp_fflush(pdev->file);
+        code = gp_ferror(pdev->file);
+    }
     gp_fflush(pdev->xref.file);
     if (pdev->strm->file != NULL)
         sflush(pdev->strm);
@@ -941,11 +946,14 @@ pdf_ferror(gx_device_pdf *pdev)
         sflush(pdev->asides.strm);
     if (pdev->streams.strm->file != NULL)
         sflush(pdev->streams.strm);
-    if (pdev->pictures.strm->file != NULL)
+    if (pdev->pictures.strm->file != NULL) {
+        int code2;
         sflush(pdev->pictures.strm);
-    return gp_ferror(pdev->file) || gp_ferror(pdev->xref.file) ||
-        gp_ferror(pdev->asides.file) || gp_ferror(pdev->streams.file) ||
-        gp_ferror(pdev->pictures.file);
+        code2 = gp_ferror(pdev->pictures.file);
+        if (code >= 0) code = code2;
+    }
+    return gp_ferror(pdev->xref.file) || gp_ferror(pdev->asides.file) ||
+           gp_ferror(pdev->streams.file) || code;
 }
 
 /* Compute the dominant text orientation of a page. */
-- 
2.43.0

From 5b5968c306b3e35cdeec83bb15026fd74a7334de Mon Sep 17 00:00:00 2001
From: Ken Sharp <Ken.Sharp@artifex.com>
Date: Sat, 12 Apr 2025 10:24:43 +0100
Subject: Argument sanitisation - handle '#' as per '='

Bug 708446
---
 base/gslibctx.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/base/gslibctx.c b/base/gslibctx.c
index 2cf5c9dda..40ff984f9 100644
--- a/base/gslibctx.c
+++ b/base/gslibctx.c
@@ -1225,9 +1225,9 @@ gs_lib_ctx_stash_sanitized_arg(gs_lib_ctx_t *ctx, const char *arg)
         case '-': /* Need to check for permitted file lists */
             /* By default, we want to keep the key, but lose the value */
             p = arg+2;
-            while (*p && *p != '=')
+            while (*p && *p != '=' && *p != '#')
                 p++;
-            if (*p == '=')
+            if (*p == '=' || *p == '#')
                 p++;
             if (*p == 0)
                 break; /* No value to elide */
@@ -1269,9 +1269,9 @@ gs_lib_ctx_stash_sanitized_arg(gs_lib_ctx_t *ctx, const char *arg)
         case 'S':
             /* By default, we want to keep the key, but lose the value */
             p = arg+2;
-            while (*p && *p != '=')
+            while (*p && *p != '=' && *p != '#')
                 p++;
-            if (*p == '=')
+            if (*p == '=' || *p == '#')
                 p++;
             if (*p == 0)
                 break; /* No value to elide */
-- 
cgit v1.2.3

Description: Fix integer overflow in pl_glyph_name (CVE-2023-38560)
 An integer overflow flaw was identified in the `pl_glyph_name` function
 within Ghostscript's PCL interpreter (`pcl/pl/plfont.c`). This issue
 arises when processing a TrueType font with a corrupted `numGlyphs`
 value of 0, which was stored as an unsigned integer. Subtracting 1 from
 this value could lead to an underflow, causing incorrect behavior or
 potential denial of service when converting crafted PCL files to PDF.
 This patch changes the type of `numGlyphs` to signed and adds a check
 to prevent the overflow.

Origin: upstream, commit:b7eb1d0174cb25a0cd44a1c0706c2ed73fc95bef
Bug: https://bugs.ghostscript.com/show_bug.cgi?id=706898
Applied-Upstream: 10.02.0rc1, commit:b7eb1d0174cb25a0cd44a1c0706c2ed73fc95bef
Forwarded: yes
Author: Chris Liddell <chris.liddell@artifex.com>
Reviewed-By: Robin Watts <robin.watts@artifex.com>
Last-Update: 2025-06-06

--- ghostscript-10.0.0~dfsg.orig/pcl/pl/plfont.c
+++ ghostscript-10.0.0~dfsg/pcl/pl/plfont.c
@@ -388,7 +388,7 @@ pl_glyph_name(gs_font * pfont, gs_glyph
 
     {
         ulong format;
-        uint numGlyphs;
+        int numGlyphs;
         uint glyph_name_index;
         const byte *postp;      /* post table pointer */
 
@@ -405,8 +405,8 @@ pl_glyph_name(gs_font * pfont, gs_glyph
             return -1;
         }
         /* skip over the post header */
-        numGlyphs = u16(postp + 32);
-        if (glyph > numGlyphs - 1) {
+        numGlyphs = (int)u16(postp + 32);
+        if ((int)glyph > numGlyphs - 1) {
             if_debug1m('=', pfont->memory,
                        "[=]glyph index %lx out of range\n", glyph);
             return -1;
Description: Prevent OCRLanguage modification when path_control_active is set
 This patch adds a security check to prevent the `OCRLanguage` parameter
 from being changed via PostScript if `path_control_active` is enabled.
 This hardens the interpreter against potential unsafe modifications from
 untrusted input. Changes affect gdevocr, gdevpdfocr, and gdevpdfp devices.

Origin: upstream, commit:3d4cfdc1a44b1969a0f14c86673a372654d443c4
Bug: https://bugs.ghostscript.com/show_bug.cgi?id=707708
Applied-Upstream: 10.04.0, commit:3d4cfdc1a44b1969a0f14c86673a372654d443c4
Forwarded: yes
Author: Chris Liddell <chris.liddell@artifex.com>
Reviewed-By: Robin Watts <robin.watts@artifex.com>
Last-Update: 2025-06-06

--- ghostscript-10.0.0~dfsg.orig/devices/gdevocr.c
+++ ghostscript-10.0.0~dfsg/devices/gdevocr.c
@@ -187,11 +187,15 @@ ocr_put_params(gx_device *dev, gs_param_
 
     switch (code = param_read_string(plist, (param_name = "OCRLanguage"), &langstr)) {
         case 0:
-            len = langstr.size;
-            if (len >= sizeof(pdev->language))
-                len = sizeof(pdev->language)-1;
-            memcpy(pdev->language, langstr.data, len);
-            pdev->language[len] = 0;
+            if (pdev->memory->gs_lib_ctx->core->path_control_active) {
+                return_error(gs_error_invalidaccess);
+            } else {
+                len = langstr.size;
+                if (len >= sizeof(pdev->language))
+                    len = sizeof(pdev->language) - 1;
+                memcpy(pdev->language, langstr.data, len);
+                pdev->language[len] = 0;
+            }
             break;
         case 1:
             break;
--- ghostscript-10.0.0~dfsg.orig/devices/gdevpdfocr.c
+++ ghostscript-10.0.0~dfsg/devices/gdevpdfocr.c
@@ -50,11 +50,15 @@ pdfocr_put_some_params(gx_device * dev,
 
     switch (code = param_read_string(plist, (param_name = "OCRLanguage"), &langstr)) {
         case 0:
-            len = langstr.size;
-            if (len >= sizeof(pdf_dev->ocr.language))
-                len = sizeof(pdf_dev->ocr.language)-1;
-            memcpy(pdf_dev->ocr.language, langstr.data, len);
-            pdf_dev->ocr.language[len] = 0;
+            if (pdf_dev->memory->gs_lib_ctx->core->path_control_active) {
+                return_error(gs_error_invalidaccess);
+            } else {
+                len = langstr.size;
+                if (len >= sizeof(pdf_dev->ocr.language))
+                    len = sizeof(pdf_dev->ocr.language) - 1;
+                memcpy(pdf_dev->ocr.language, langstr.data, len);
+                pdf_dev->ocr.language[len] = 0;
+            }
             break;
         case 1:
             break;
--- ghostscript-10.0.0~dfsg.orig/devices/vector/gdevpdfp.c
+++ ghostscript-10.0.0~dfsg/devices/vector/gdevpdfp.c
@@ -468,11 +468,15 @@ gdev_pdf_put_params_impl(gx_device * dev
         gs_param_string langstr;
         switch (code = param_read_string(plist, (param_name = "OCRLanguage"), &langstr)) {
             case 0:
-                len = langstr.size;
-                if (len >= sizeof(pdev->ocr_language))
-                    len = sizeof(pdev->ocr_language)-1;
-                memcpy(pdev->ocr_language, langstr.data, len);
-                pdev->ocr_language[len] = 0;
+                if (pdev->memory->gs_lib_ctx->core->path_control_active) {
+                    return_error(gs_error_invalidaccess);
+                } else {
+                    len = langstr.size;
+                    if (len >= sizeof(pdev->ocr_language))
+                        len = sizeof(pdev->ocr_language) - 1;
+                    memcpy(pdev->ocr_language, langstr.data, len);
+                    pdev->ocr_language[len] = 0;
+                }
                 break;
             case 1:
                 break;
