From d636104ff9a89c84f9334a9f1370f2eacb3d115c Mon Sep 17 00:00:00 2001
Date: Wed, 6 Aug 2025 06:39:26 +0000
Subject: [PATCH] patch

---
 magick/image.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Index: imagemagick-6.9.11.60+dfsg/magick/image.c
===================================================================
--- imagemagick-6.9.11.60+dfsg.orig/magick/image.c
+++ imagemagick-6.9.11.60+dfsg/magick/image.c
@@ -1682,7 +1682,7 @@ MagickExport size_t InterpretImageFilena
     q=(char *) p+1;
     if (*q == '%')
       {
-        p=q+1;
+        p++;
         continue;
       }
     field_width=0;From 14234b2d3be45af1f71ffafd260532bbd8f81d39 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Sat, 9 Aug 2025 08:28:19 -0400
Subject: [PATCH] 
 https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-qp29-wxp5-wh82

---
 coders/png.c | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/coders/png.c b/coders/png.c
index a662fb38b..b3e690b32 100644
--- a/coders/png.c
+++ b/coders/png.c
@@ -6753,7 +6753,7 @@ static Image *ReadOneMNGImage(MngInfo* mng_info, const ImageInfo *image_info,
         if (((mng_info->magn_methx > 0) && (mng_info->magn_methx <= 5)) &&
             ((mng_info->magn_methy > 0) && (mng_info->magn_methy <= 5)))
           {
-            png_uint_32
+            size_t
                magnified_height,
                magnified_width;
 
@@ -6767,19 +6767,19 @@ static Image *ReadOneMNGImage(MngInfo* mng_info, const ImageInfo *image_info,
               mng_info->magn_methy = 1;
             if (mng_info->magn_methx == 1)
               {
-                magnified_width=mng_info->magn_ml;
+                magnified_width=(size_t) mng_info->magn_ml;
 
                 if (image->columns > 1)
                    magnified_width += mng_info->magn_mr;
 
                 if (image->columns > 2)
-                   magnified_width += (png_uint_32)
+                   magnified_width += (size_t)
                       ((image->columns-2)*(mng_info->magn_mx));
               }
 
             else
               {
-                magnified_width=(png_uint_32) image->columns;
+                magnified_width=(size_t) image->columns;
 
                 if (image->columns > 1)
                    magnified_width += mng_info->magn_ml-1;
@@ -6788,25 +6788,25 @@ static Image *ReadOneMNGImage(MngInfo* mng_info, const ImageInfo *image_info,
                    magnified_width += mng_info->magn_mr-1;
 
                 if (image->columns > 3)
-                   magnified_width += (png_uint_32)
+                   magnified_width += (size_t)
                       ((image->columns-3)*(mng_info->magn_mx-1));
               }
 
             if (mng_info->magn_methy == 1)
               {
-                magnified_height=mng_info->magn_mt;
+                magnified_height=(size_t) mng_info->magn_mt;
 
                 if (image->rows > 1)
                    magnified_height += mng_info->magn_mb;
 
                 if (image->rows > 2)
-                   magnified_height += (png_uint_32)
+                   magnified_height += (size_t)
                       ((image->rows-2)*(mng_info->magn_my));
               }
 
             else
               {
-                magnified_height=(png_uint_32) image->rows;
+                magnified_height=(size_t) image->rows;
 
                 if (image->rows > 1)
                    magnified_height += mng_info->magn_mt-1;
@@ -6815,7 +6815,7 @@ static Image *ReadOneMNGImage(MngInfo* mng_info, const ImageInfo *image_info,
                    magnified_height += mng_info->magn_mb-1;
 
                 if (image->rows > 3)
-                   magnified_height += (png_uint_32)
+                   magnified_height += (size_t)
                       ((image->rows-3)*(mng_info->magn_my-1));
               }
 From 3025793e5582845cd0a6d3ad9378252d10babde4 Mon Sep 17 00:00:00 2001
From: subeesh7558 <subeeshsubi7558@gmail.com>
Date: Wed, 27 Aug 2025 12:10:17 +0530
Subject: [PATCH] 
 https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-mxvv-97wh-cfmm

---
 coders/bmp.c | 27 +++++++++++++++++++++------
 1 file changed, 21 insertions(+), 6 deletions(-)

diff --git a/coders/bmp.c b/coders/bmp.c
index 8b7b2a22d..126eccae3 100644
--- a/coders/bmp.c
+++ b/coders/bmp.c
@@ -479,6 +479,11 @@ static MagickBooleanType IsBMP(const unsigned char *magick,const size_t length)
     return(MagickTrue);
   return(MagickFalse);
 }
+
+static inline MagickBooleanType BMPOverflowCheck(size_t x,size_t y)
+{
+  return((y != 0) && (x > 4294967295UL/y) ? MagickTrue : MagickFalse);
+}
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -550,6 +555,7 @@ static Image *ReadBMPImage(const ImageInfo *image_info,ExceptionInfo *exception)
   size_t
     bit,
     bytes_per_line,
+    extent,
     length;
 
   ssize_t
@@ -979,15 +985,21 @@ static Image *ReadBMPImage(const ImageInfo *image_info,ExceptionInfo *exception)
       ThrowReaderException(CorruptImageError,"ImproperImageHeader");
     if (bmp_info.compression == BI_RLE4)
       bmp_info.bits_per_pixel<<=1;
-    bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);
-    length=(size_t) bytes_per_line*image->rows;
+    extent=image->columns*bmp_info.bits_per_pixel;
+    bytes_per_line=4*((extent+31)/32);
+    if (BMPOverflowCheck(bytes_per_line,image->rows) != MagickFalse)
+      ThrowReaderException(CorruptImageError,"InsufficientImageDataInFile");
+    length=bytes_per_line*image->rows;
     if ((MagickSizeType) (length/256) > blob_size)
       ThrowReaderException(CorruptImageError,"InsufficientImageDataInFile");
     if ((bmp_info.compression == BI_RGB) ||
         (bmp_info.compression == BI_BITFIELDS))
       {
-        pixel_info=AcquireVirtualMemory(image->rows,MagickMax(bytes_per_line,
-          image->columns+256UL)*sizeof(*pixels));
+        extent=MagickMax(bytes_per_line,image->columns+1UL);
+        if ((BMPOverflowCheck(image->rows,extent) != MagickFalse) ||
+            (BMPOverflowCheck(extent,sizeof(*pixels)) != MagickFalse))
+          ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+        pixel_info=AcquireVirtualMemory(image->rows,extent*sizeof(*pixels));
         if (pixel_info == (MemoryInfo *) NULL)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
         pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);
@@ -1007,8 +1019,11 @@ static Image *ReadBMPImage(const ImageInfo *image_info,ExceptionInfo *exception)
         /*
           Convert run-length encoded raster pixels.
         */
-        pixel_info=AcquireVirtualMemory(image->rows,MagickMax(bytes_per_line,
-          image->columns+256UL)*sizeof(*pixels));
+        extent=MagickMax(bytes_per_line,image->columns+1UL);
+        if ((BMPOverflowCheck(image->rows,extent) != MagickFalse) ||
+            (BMPOverflowCheck(extent,sizeof(*pixels)) != MagickFalse))
+          ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+        pixel_info=AcquireVirtualMemory(image->rows,extent*sizeof(*pixels));
         if (pixel_info == (MemoryInfo *) NULL)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
         pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);
-- 
2.43.0

diff --git a/magick/image.c b/magick/image.c
index 1fc3617..ee96ac6 100644
--- a/magick/image.c
+++ b/magick/image.c
@@ -1671,7 +1671,6 @@ MagickExport size_t InterpretImageFilename(const ImageInfo *image_info,
     *p;
 
   ssize_t
-    field_width,
     offset;
 
   canonical=MagickFalse;
@@ -1685,21 +1684,22 @@ MagickExport size_t InterpretImageFilename(const ImageInfo *image_info,
         p=q+1;
         continue;
       }
-    field_width=0;
-    if (*q == '0')
-      field_width=(ssize_t) strtol(q,&q,10);
     switch (*q)
     {
       case 'd':
       case 'o':
       case 'x':
       {
+        ssize_t
+          count;
         q++;
         c=(*q);
         *q='\0';
-        (void) FormatLocaleString(filename+(p-format-offset),(size_t)
+        count=FormatLocaleString(filename+(p-format-offset),(size_t)
           (MaxTextExtent-(p-format-offset)),p,value);
-        offset+=(4-field_width);
+        if ((count <= 0) || (count > (MagickPathExtent-(p-format-offset))))
+          return(0);
+        offset+=(ssize_t) ((q-p)-count);
         *q=c;
         (void) ConcatenateMagickString(filename,q,MaxTextExtent);
         canonical=MagickTrue;
From ec2f39eebd444dfcc6bd6c0c75cd8d404dacf4c7 Mon Sep 17 00:00:00 2001
Date: Wed, 6 Aug 2025 13:57:40 +0530
Subject: [PATCH] [PATCH] Fixed memory leak when entering StreamImage multiple
 times.

---
 magick/stream.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/magick/stream.c b/magick/stream.c
index a44b550..ea6ddd9 100644
--- a/magick/stream.c
+++ b/magick/stream.c
@@ -1275,7 +1275,8 @@ MagickExport Image *StreamImage(const ImageInfo *image_info,
   assert(exception != (ExceptionInfo *) NULL);
   read_info=CloneImageInfo(image_info);
   stream_info->image_info=image_info;
-  stream_info->quantum_info=AcquireQuantumInfo(image_info,(Image *) NULL);
+  if (stream_info->quantum_info == (QuantumInfo *) NULL)
+    stream_info->quantum_info=AcquireQuantumInfo(image_info,(Image *) NULL);
   if (stream_info->quantum_info == (QuantumInfo *) NULL)
     {
       read_info=DestroyImageInfo(read_info);
-- 
2.43.0

