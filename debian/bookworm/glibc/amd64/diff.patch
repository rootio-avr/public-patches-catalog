From 59b7dc4118cff68060348ebf2f18a71ee93faaab Mon Sep 17 00:00:00 2001
From: 
Date: Wed, 9 Jul 2025 19:49:14 +0530
Subject: [PATCH] CVE-2019-1010022

---
 ROOT-SECURITY-RELEASE.md | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/ROOT-SECURITY-RELEASE.md b/ROOT-SECURITY-RELEASE.md
index f6a1ee48..e9a5d672 100644
--- a/ROOT-SECURITY-RELEASE.md
+++ b/ROOT-SECURITY-RELEASE.md
@@ -90,6 +90,29 @@ Mark as **low risk / not actionable** unless your application parses untrusted r
 **‚úÖ Recommendation:**  
 Treat as **safe to ignore**, unless your system parses regex from untrusted sources. Document as a known scanner false positive in container security audits.
 
+## üìå CVE-2019-1010022 ‚Äì Mitigation Bypass in NPTL
+
+- **Component:** NPTL (Native POSIX Thread Library)
+- **Issue:** Stack guard mitigation bypass via stack buffer overflow
+- **Impact:** Theoretical ability to bypass stack protections
+- **Upstream Status:** ‚ùó Not considered a security vulnerability  
+  ‚Üí [Upstream Bugzilla #22850](https://sourceware.org/bugzilla/show_bug.cgi?id=22850)
+
+### Vulnerable Versions (Debian)
+| Release              | Version               | Status     |
+|----------------------|------------------------|------------|
+| bullseye             | 2.31-13+deb11u11       | Vulnerable |
+| bookworm             | 2.36-9+deb12u10        | Vulnerable |
+| sid/trixie           | 2.41-9                 | Vulnerable |
+
+### Why You Can't Fix This
+- No official patch exists
+- Not treated as a real-world exploit
+- Updating glibc won‚Äôt eliminate the flag
+- Replacing glibc in containers is unsafe
+
+**‚úÖ Recommendation:** Mark as a known false positive. No action needed.
+
 ---
 
 ## Summary
-- 
2.43.0

Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 glibc (2.36-9+deb12u10) bookworm; urgency=medium
 .
   * debian/patches/git-updates.diff: update from upstream stable branch:
     - Change ldconfig auxcache magic number.
     - Ensure data passed to the rseq syscall are properly initialized.
     - Avoid integer truncation when parsing CPUID data with large cache sizes,
       fixing a memcpy/memmove when running under the FreeBSD's bhyve
       hypervisor.
     - Optimize log2/expm1/log1p math functions with FMA.
     - Fix missing cache information when running under Azure TDX hypervisor.
     - Fix TLS performance degradation after dlopen() usage.
     - Fix memset performance for unaligned destinations causing additional
       loop iterations.
     - Fixes a buffer overflow when printing assertion failure message
       (GLIBC-SA-2025-0001 / CVE-2025-0395).
Author: Aurelien Jarno <aurel32@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2025-08-01

Index: glibc-2.36/posix/Makefile
===================================================================
--- glibc-2.36.orig/posix/Makefile
+++ glibc-2.36/posix/Makefile
@@ -75,7 +75,8 @@ routines :=								      \
 
 aux		:= init-posix environ
 tests		:= test-errno tstgetopt testfnm runtests runptests \
-		   tst-preadwrite tst-preadwrite64 test-vfork regexbug1 \
+		   tst-preadwrite tst-preadwrite64 tst-regcomp-bracket-free \
+		   test-vfork regexbug1 \
 		   tst-mmap tst-mmap-offset tst-getaddrinfo tst-truncate \
 		   tst-truncate64 tst-fork tst-fnmatch tst-regexloc tst-dir \
 		   tst-chmod bug-regex1 bug-regex2 bug-regex3 bug-regex4 \
From 7ea06e994093fa0bcca0d0ee2c1db271d8d7885d Mon Sep 17 00:00:00 2001
From: Florian Weimer <fweimer@redhat.com>
Date: Mon, 21 Jul 2025 21:43:49 +0200
Subject: [PATCH] posix: Fix double-free after allocation failure in regcomp
 (bug 33185)

If a memory allocation failure occurs during bracket expression
parsing in regcomp, a double-free error may result.

Reported-by: Anastasia Belova <abelova@astralinux.ru>
Co-authored-by: Paul Eggert <eggert@cs.ucla.edu>
Reviewed-by: Andreas K. Huettel <dilfridge@gentoo.org>
---
 posix/Makefile                   |   1 +
 posix/regcomp.c                  |   4 +-
 posix/tst-regcomp-bracket-free.c | 176 +++++++++++++++++++++++++++++++
 3 files changed, 180 insertions(+), 1 deletion(-)
 create mode 100644 posix/tst-regcomp-bracket-free.c

Index: glibc-2.36/posix/regcomp.c
===================================================================
--- glibc-2.36.orig/posix/regcomp.c
+++ glibc-2.36/posix/regcomp.c
@@ -3383,6 +3383,7 @@ parse_bracket_exp (re_string_t *regexp,
     {
 #ifdef RE_ENABLE_I18N
       free_charset (mbcset);
+      mbcset = NULL;
 #endif
       /* Build a tree for simple bracket.  */
       br_token.type = SIMPLE_BRACKET;
@@ -3398,7 +3399,8 @@ parse_bracket_exp (re_string_t *regexp,
  parse_bracket_exp_free_return:
   re_free (sbcset);
 #ifdef RE_ENABLE_I18N
-  free_charset (mbcset);
+  if (__glibc_likely (mbcset != NULL))
+    free_charset (mbcset);
 #endif /* RE_ENABLE_I18N */
   return NULL;
 }
Index: glibc-2.36/posix/tst-regcomp-bracket-free.c
===================================================================
--- /dev/null
+++ glibc-2.36/posix/tst-regcomp-bracket-free.c
@@ -0,0 +1,176 @@
+/* Test regcomp bracket parsing with injected allocation failures (bug 33185).
+   Copyright (C) 2025 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+/* This test invokes regcomp multiple times, failing one memory
+   allocation in each call.  The function call should fail with
+   REG_ESPACE (or succeed if it can recover from the allocation
+   failure).  Previously, there was double-free bug.  */
+
+#include <errno.h>
+#include <regex.h>
+#include <stdio.h>
+#include <string.h>
+#include <support/check.h>
+#include <support/namespace.h>
+#include <support/support.h>
+
+/* Data structure allocated via MAP_SHARED, so that writes from the
+   subprocess are visible.  */
+struct shared_data
+{
+  /* Number of tracked allocations performed so far.  */
+  volatile unsigned int allocation_count;
+
+  /* If this number is reached, one allocation fails.  */
+  volatile unsigned int failing_allocation;
+
+  /* The subprocess stores the expected name here.  */
+  char name[100];
+};
+
+/* Allocation count in shared mapping.  */
+static struct shared_data *shared;
+
+/* Returns true if a failure should be injected for this allocation.  */
+static bool
+fail_this_allocation (void)
+{
+  if (shared != NULL)
+    {
+      unsigned int count = shared->allocation_count;
+      shared->allocation_count = count + 1;
+      return count == shared->failing_allocation;
+    }
+  else
+    return false;
+}
+
+/* Failure-injecting wrappers for allocation functions used by glibc.  */
+
+void *
+malloc (size_t size)
+{
+  if (fail_this_allocation ())
+    {
+      errno = ENOMEM;
+      return NULL;
+    }
+  extern __typeof (malloc) __libc_malloc;
+  return __libc_malloc (size);
+}
+
+void *
+calloc (size_t a, size_t b)
+{
+  if (fail_this_allocation ())
+    {
+      errno = ENOMEM;
+      return NULL;
+    }
+  extern __typeof (calloc) __libc_calloc;
+  return __libc_calloc (a, b);
+}
+
+void *
+realloc (void *ptr, size_t size)
+{
+  if (fail_this_allocation ())
+    {
+      errno = ENOMEM;
+      return NULL;
+    }
+  extern __typeof (realloc) __libc_realloc;
+  return __libc_realloc (ptr, size);
+}
+
+/* No-op subprocess to verify that support_isolate_in_subprocess does
+   not perform any heap allocations.  */
+static void
+no_op (void *ignored)
+{
+}
+
+/* Perform a regcomp call in a subprocess.  Used to count its
+   allocations.  */
+static void
+initialize (void *regexp1)
+{
+  const char *regexp = regexp1;
+
+  shared->allocation_count = 0;
+
+  regex_t reg;
+  TEST_COMPARE (regcomp (&reg, regexp, 0), 0);
+}
+
+/* Perform regcomp in a subprocess with fault injection.  */
+static void
+test_in_subprocess (void *regexp1)
+{
+  const char *regexp = regexp1;
+  unsigned int inject_at = shared->failing_allocation;
+
+  regex_t reg;
+  int ret = regcomp (&reg, regexp, 0);
+
+  if (ret != 0)
+    {
+      TEST_COMPARE (ret, REG_ESPACE);
+      printf ("info: allocation %u failure results in return value %d,"
+              " error %s (%d)\n",
+              inject_at, ret, strerrorname_np (errno), errno);
+    }
+}
+
+static int
+do_test (void)
+{
+  char regexp[] = "[:alpha:]";
+
+  shared = support_shared_allocate (sizeof (*shared));
+
+  /* Disable fault injection.  */
+  shared->failing_allocation = ~0U;
+
+  support_isolate_in_subprocess (no_op, NULL);
+  TEST_COMPARE (shared->allocation_count, 0);
+
+  support_isolate_in_subprocess (initialize, regexp);
+
+  /* The number of allocations in the successful case, plus some
+     slack.  Once the number of expected allocations is exceeded,
+     injecting further failures does not make a difference.  */
+  unsigned int maximum_allocation_count = shared->allocation_count;
+  printf ("info: successful call performs %u allocations\n",
+          maximum_allocation_count);
+  maximum_allocation_count += 10;
+
+  for (unsigned int inject_at = 0; inject_at <= maximum_allocation_count;
+       ++inject_at)
+    {
+      shared->allocation_count = 0;
+      shared->failing_allocation = inject_at;
+      support_isolate_in_subprocess (test_in_subprocess, regexp);
+    }
+
+  support_shared_free (shared);
+
+  return 0;
+}
+
+#include <support/test-driver.c>
From 4973a48f667847c356f287bbeec380677db544a6 Mon Sep 17 00:00:00 2001
From: 
Date: Wed, 9 Jul 2025 19:46:28 +0530
Subject: [PATCH] CVE-2018-20796

---
 ROOT-SECURITY-RELEASE.md | 89 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 89 insertions(+)
 create mode 100644 ROOT-SECURITY-RELEASE.md

diff --git a/ROOT-SECURITY-RELEASE.md b/ROOT-SECURITY-RELEASE.md
new file mode 100644
index 00000000..c6c212fb
--- /dev/null
+++ b/ROOT-SECURITY-RELEASE.md
@@ -0,0 +1,89 @@
+# Why You Cannot Fix `glibc` Vulnerabilities via Code Patching in Containers
+
+## Overview: What Is `glibc`?
+
+`glibc` (GNU C Library) is the core C runtime used by most Linux distributions. It provides low-level system functionality such as:
+
+- System calls
+- Threading (via NPTL)
+- Memory allocation
+- Internationalization
+
+Due to its critical role, `glibc` is tightly coupled with the OS and is not easily replaceable or patchable‚Äîespecially in containers.
+
+---
+
+## Why Vulnerabilities in `glibc` Are Often Not Fixable in Containers
+
+Security scanners (Trivy, Grype, etc.) flag vulnerabilities based on:
+
+- Package metadata (e.g., `libc6` version)
+- Public security feeds (NVD, Debian Tracker)
+
+However, these scans often generate **false positives** because they:
+
+- Ignore runtime behavior or build configuration
+- Flag packages even if the vulnerable code is unused or removed
+- Don‚Äôt account for upstream decisions to not treat certain CVEs as security issues
+
+Manually patching or replacing `glibc` can:
+
+- Break containerized applications
+- Violate system-level ABI compatibility
+- Introduce instability or undefined behavior
+
+---
+
+# ‚ö†Ô∏è CVE Breakdown
+
+Below are known `glibc` CVEs that are often flagged but are either **not exploitable**, **false positives**, or **not treated as security issues upstream**.
+
+---
+
+---
+
+## üìå CVE-2018-20796 ‚Äì Uncontrolled Recursion in `regexec.c`
+
+- **Component:** POSIX regex (`posix/regexec.c`)
+- **Issue:** Uncontrolled recursion via crafted regex pattern
+- **Impact:** A crafted regular expression (e.g., `(\227|)(\\1\\1|t1|\\\2537)+`) can cause a recursion overflow, potentially leading to a crash (DoS)
+- **Upstream Status:** ‚ùó Not treated as a security vulnerability  
+  ‚Üí [GNU Bug #34141](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34141)  
+  ‚Üí [GNU Gnulib Thread](https://lists.gnu.org/archive/html/bug-gnulib/2019-01/msg00108.html)  
+  ‚Üí [glibc Security Exceptions](https://sourceware.org/glibc/wiki/Security%20Exceptions)
+
+### Vulnerable Versions (Debian)
+| Release              | Version               | Status     |
+|----------------------|------------------------|------------|
+| bullseye             | 2.31-13+deb11u11       | Vulnerable |
+| bookworm             | 2.36-9+deb12u10        | Vulnerable |
+| sid/trixie           | 2.41-9                 | Vulnerable |
+
+### Why You Can't Fix This
+- The issue was **never patched** because it's not considered a valid security risk
+- It can only be triggered by supplying malicious, complex regex patterns
+- Does **not affect normal usage** of `grep`, `sed`, or other tools unless user accepts untrusted input
+
+**‚úÖ Recommendation:**  
+Mark as **low risk / not actionable** unless your application parses untrusted regex patterns. This CVE is safe to ignore in nearly all production environments, especially in containers.
+
+---
+
+## Summary
+
+- `glibc` is not designed to be patched or replaced within containers.
+- Many CVEs flagged by scanners are:
+  - **False positives**
+  - **Non-exploitable**
+  - **Not security-relevant**
+- Attempting to "fix" them can cause serious stability issues.
+
+**üìå Best Practice:** Document these CVEs, understand their context, and only act on legitimate, exploitable vulnerabilities.
+
+---
+
+## References
+
+- [Debian Security Tracker](https://security-tracker.debian.org/)
+- [NVD - National Vulnerability Database](https://nvd.nist.gov/)
+- [GNU libc Bugzilla](https://sourceware.org/bugzilla/)
-- 
2.43.0

From 5451fa962cd0a90a0e2ec1d8910a559ace02bba0 Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date: Mon, 6 Nov 2023 17:25:49 -0300
Subject: [PATCH] elf: Ignore LD_LIBRARY_PATH and debug env var for setuid for
 static

It mimics the ld.so behavior.

Checked on x86_64-linux-gnu.
Reviewed-by: Siddhesh Poyarekar <siddhesh@sourceware.org>
---
 elf/dl-support.c | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/elf/dl-support.c b/elf/dl-support.c
index 31a608df87..837fa1c836 100644
--- a/elf/dl-support.c
+++ b/elf/dl-support.c
@@ -285,7 +285,7 @@
   _dl_main_map.l_phdr = GL(dl_phdr);
   _dl_main_map.l_phnum = GL(dl_phnum);
 
-  _dl_verbose = *(getenv ("LD_WARN") ?: "") == '\0' ? 0 : 1;
+ 
 
   /* Set up the data structures for the system-supplied DSO early,
      so they can influence _dl_init_paths.  */
@@ -293,6 +293,22 @@
 
   /* With vDSO setup we can initialize the function pointers.  */
   setup_vdso_pointers ();
+ 
+  if (__libc_enable_secure)
+    {
+      static const char unsecure_envvars[] =
+       UNSECURE_ENVVARS
+       ;
+      const char *cp = unsecure_envvars;
+
+      while (cp < unsecure_envvars + sizeof (unsecure_envvars))
+       {
+         __unsetenv (cp);
+         cp = strchr (cp, '\0') + 1;
+       }
+    }
+
+  _dl_verbose = *(getenv ("LD_WARN") ?: "") == '\0' ? 0 : 1;
 
   /* Initialize the data structures for the search paths for shared
      objects.  */
@@ -310,30 +326,6 @@
 
   _dl_dynamic_weak = *(getenv ("LD_DYNAMIC_WEAK") ?: "") == '\0';
 
-  _dl_profile_output = getenv ("LD_PROFILE_OUTPUT");
-  if (_dl_profile_output == NULL || _dl_profile_output[0] == '\0')
-    _dl_profile_output
-      = &"/var/tmp\0/var/profile"[__libc_enable_secure ? 9 : 0];
-
-  if (__libc_enable_secure)
-    {
-      static const char unsecure_envvars[] =
-	UNSECURE_ENVVARS
-	;
-      const char *cp = unsecure_envvars;
-
-      while (cp < unsecure_envvars + sizeof (unsecure_envvars))
-	{
-	  __unsetenv (cp);
-	  cp = (const char *) __rawmemchr (cp, '\0') + 1;
-	}
-
-#if !HAVE_TUNABLES
-      if (__access ("/etc/suid-debug", F_OK) != 0)
-	__unsetenv ("MALLOC_CHECK_");
-#endif
-    }
-
 #ifdef DL_PLATFORM_INIT
   DL_PLATFORM_INIT;
 #endif
-- 
2.43.5
From 7ab28c41144fa3ae9a7e779dde6fc0e1b6329554 Mon Sep 17 00:00:00 2001
From: 
Date: Wed, 9 Jul 2025 19:50:18 +0530
Subject: [PATCH] CVE-2019-1010023

---
 ROOT-SECURITY-RELEASE.md | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/ROOT-SECURITY-RELEASE.md b/ROOT-SECURITY-RELEASE.md
index e9a5d672..27552678 100644
--- a/ROOT-SECURITY-RELEASE.md
+++ b/ROOT-SECURITY-RELEASE.md
@@ -113,6 +113,30 @@ Treat as **safe to ignore**, unless your system parses regex from untrusted sour
 
 **‚úÖ Recommendation:** Mark as a known false positive. No action needed.
 
+## üìå CVE-2019-1010023 ‚Äì Code Execution via `ldd` on Malicious ELF Files
+
+- **Component:** `ldd` / `libld`
+- **Issue:** Executing `ldd` on a malicious ELF file can trigger code execution
+- **Impact:** In the worst case, attackers may elevate privileges if a victim runs `ldd` on a crafted ELF
+- **Upstream Status:** ‚ùó Not considered a security vulnerability  
+  ‚Üí [Upstream Bugzilla #22851](https://sourceware.org/bugzilla/show_bug.cgi?id=22851)
+
+### Vulnerable Versions (Debian)
+| Release              | Version               | Status     |
+|----------------------|------------------------|------------|
+| bullseye             | 2.31-13+deb11u11       | Vulnerable |
+| bookworm             | 2.36-9+deb12u10        | Vulnerable |
+| sid/trixie           | 2.41-9                 | Vulnerable |
+
+### Why You Can't Fix This
+- No official patch has been released
+- The issue relies on a **misuse of `ldd`**, which is **never meant to be run on untrusted binaries**
+- Upstream has marked it **unimportant** and **non-exploitable under normal use**
+- All maintained glibc versions remain flagged
+
+**‚úÖ Recommendation:**  
+Document this CVE as **not exploitable** unless `ldd` is intentionally run on untrusted input, which violates secure coding practices. No container-level action is needed.
+
 ---
 
 ## Summary
-- 
2.43.0

From 33783e576378c31cb296b0fdaf8da269ad7562dd Mon Sep 17 00:00:00 2001
From: 
Date: Wed, 9 Jul 2025 19:48:16 +0530
Subject: [PATCH] CVE-2019-9192

---
 ROOT-SECURITY-RELEASE.md | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/ROOT-SECURITY-RELEASE.md b/ROOT-SECURITY-RELEASE.md
index c6c212fb..f6a1ee48 100644
--- a/ROOT-SECURITY-RELEASE.md
+++ b/ROOT-SECURITY-RELEASE.md
@@ -67,6 +67,29 @@ Below are known `glibc` CVEs that are often flagged but are either **not exploit
 **‚úÖ Recommendation:**  
 Mark as **low risk / not actionable** unless your application parses untrusted regex patterns. This CVE is safe to ignore in nearly all production environments, especially in containers.
 
+## üìå CVE-2019-9192 ‚Äì Uncontrolled Recursion via Regex Backreference
+
+- **Component:** POSIX regex (`posix/regexec.c`)
+- **Issue:** Recursive backreference expansion can cause uncontrolled recursion with crafted patterns
+- **Impact:** A regex like `(|)(\\1\\1)*` may trigger a stack overflow (DoS), causing affected tools (e.g., `grep`) to crash
+- **Upstream Status:** ‚ùó Disputed as a security vulnerability  
+  ‚Üí [Upstream Bugzilla #24269](https://sourceware.org/bugzilla/show_bug.cgi?id=24269)
+
+### Vulnerable Versions (Debian)
+| Release              | Version               | Status     |
+|----------------------|------------------------|------------|
+| bullseye             | 2.31-13+deb11u11       | Vulnerable |
+| bookworm             | 2.36-9+deb12u10        | Vulnerable |
+| sid/trixie           | 2.41-9                 | Vulnerable |
+
+### Why You Can't Fix This
+- This is a **variation of CVE-2018-20796**, targeting a different regex structure
+- Upstream maintainers dispute the severity, noting the pattern is **intentionally malformed**
+- This issue is **not fixed**, and is **not considered a security flaw**
+
+**‚úÖ Recommendation:**  
+Treat as **safe to ignore**, unless your system parses regex from untrusted sources. Document as a known scanner false positive in container security audits.
+
 ---
 
 ## Summary
-- 
2.43.0

