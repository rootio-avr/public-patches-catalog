diff --git a/expat/lib/xmlparse.c b/expat/lib/xmlparse.c
index dfc316ca..6b843f7f 100644
--- a/expat/lib/xmlparse.c
+++ b/expat/lib/xmlparse.c
@@ -625,6 +625,7 @@ struct XML_ParserStruct {
   enum XML_ParamEntityParsing m_paramEntityParsing;
 #endif
   unsigned long m_hash_secret_salt;
+  unsigned int m_entityRecursionDepth;
 };
 
 #define MALLOC(parser, s) (parser->m_mem.malloc_fcn((s)))
@@ -1067,6 +1068,7 @@ parserInit(XML_Parser parser, const XML_Char *encodingName) {
   parser->m_unknownEncodingData = NULL;
   parser->m_parentParser = NULL;
   parser->m_parsingStatus.parsing = XML_INITIALIZED;
+  parser->m_entityRecursionDepth = 0;
 #ifdef XML_DTD
   parser->m_isParamEntity = XML_FALSE;
   parser->m_useForeignDTD = XML_FALSE;
@@ -5173,6 +5175,11 @@ processInternalEntity(XML_Parser parser, ENTITY *entity, XML_Bool betweenDecl) {
   enum XML_Error result;
   OPEN_INTERNAL_ENTITY *openEntity;
 
+  /* Prevent stack overflow from deeply nested entities */
+  if (parser->m_entityRecursionDepth >= 40) {
+    return XML_ERROR_RECURSIVE_ENTITY_REF;
+  }
+
   if (parser->m_freeInternalEntities) {
     openEntity = parser->m_freeInternalEntities;
     parser->m_freeInternalEntities = openEntity->next;
@@ -5182,6 +5189,7 @@ processInternalEntity(XML_Parser parser, ENTITY *entity, XML_Bool betweenDecl) {
     if (! openEntity)
       return XML_ERROR_NO_MEMORY;
   }
+  parser->m_entityRecursionDepth++;
   entity->open = XML_TRUE;
   entity->processed = 0;
   openEntity->next = parser->m_openInternalEntities;
@@ -5217,8 +5225,11 @@ processInternalEntity(XML_Parser parser, ENTITY *entity, XML_Bool betweenDecl) {
       /* put openEntity back in list of free instances */
       openEntity->next = parser->m_freeInternalEntities;
       parser->m_freeInternalEntities = openEntity;
+      parser->m_entityRecursionDepth--;
     }
   }
+  if (result != XML_ERROR_NONE)
+    parser->m_entityRecursionDepth--;
   return result;
 }
 